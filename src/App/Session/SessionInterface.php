<?php
/**
 * based on:
 *
 * @see       https://github.com/zendframework/zend-expressive-session for the canonical source repository
 * @copyright Copyright (c) 2017 Zend Technologies USA Inc. (https://www.zend.com)
 * @license   https://github.com/zendframework/zend-expressive-session/blob/master/LICENSE.md New BSD License
 */

declare(strict_types=1);

namespace App\Session;

interface SessionInterface
{
    /**
     * Retrieve the session identifier.
     *
     * @return string
     */
    public function getId() : string;

    /**
     * Is this a new session or a resumed session?
     */
    public function isNew() : bool;

    /**
     * Retrieve a value stored in the session.
     *
     * @param mixed $default Default value to return if $name does not exist.
     * @return mixed
     */
    public function get(string $name, $default = null);

    /**
     * Whether or not the container has the given key.
     */
    public function has(string $name) : bool;

    /**
     * Set a value within the session.
     *
     * Values MUST be serializable in any format; we recommend ensuring the
     * values are JSON serializable for greatest portability.
     *
     * @param mixed $value
     */
    public function set(string $name, $value) : void;

    /**
     * Remove a value from the session.
     */
    public function unset(string $name) : void;

    /**
     * Clear all values.
     */
    public function clear() : void;

    /**
     * Serialize the session data into an array.
     */
    public function toArray() : array;

    /**
     * Does the session contain data changes? If not, the middleware handling
     * session persistence may not need to do more work.
     */
    public function hasChanged() : bool;

    /**
     * Mark the session as to be regenerated by the persitence layer.
     */
    public function regenerate();

    /**
     * Is the session marked for regeneration?
     */
    public function isRegenerated() : bool;

    /**
     * Define how long the session cookie should live.
     *
     * Use this value to detail to the session persistence engine how long the
     * session cookie should live. Possible values are:
     *
     * - 0 or a negative integer, to indicate the cookie should be treated as a
     *   session cookie, and expire when the window is closed.
     *
     * - a positive integer, to indicate for how long the current session should
     *   live
     *
     * This value could be used to create an Expires or Max-Age parameter for a
     * session cookie.
     *
     * @param int $lifetime Number of seconds the session cookie should persist for.
     */
    public function persistFor(int $lifetime) : void;

    /**
     * Determine how long the session cookie should live.
     *
     * This will return the value provided to persistFor().
     *
     * If that method has not been called, the value MUST return null, to
     * indicate that no changes have been requested for the current session
     * duration
     */
    public function getLifetime() : ?int;
}
